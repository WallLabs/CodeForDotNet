<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeForDotNet.Full</name>
    </assembly>
    <members>
        <member name="T:CodeForDotNet.ComponentModel.BigIntegerConverter">
            <summary>
            Type converter which supports use of <see cref="T:System.Numerics.BigInteger"/> types in dependency properties.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.BigIntegerConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests if conversion is possible from a source type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.BigIntegerConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests if conversion is possible to a destination type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.BigIntegerConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a value from a source type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.BigIntegerConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the current value to the target type.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.GenericBindingList`1">
            <summary>
            Generic bindable collection of items.
            </summary>
            <remarks>
            To create a binding list of any type, inherit this class passing a key comparing function to the constructor.
            The <see cref="T:System.ComponentModel.DataObjectAttribute"/> and <see cref="T:System.SerializableAttribute"/> must still be defined on your class.
            </remarks>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.GenericBindingList`1._keyComparer">
            <summary>
            Key comparer function used to lookup items in the list, e.g. (x, y) => x.Id == y.Id
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,`0,System.Boolean})">
            <summary>
            Creates an instance based on an existing list.
            </summary>
            <param name="list">Optional items to add to the list.</param>
            <param name="keyComparer">Key comparer used to lookup items in the list, e.g. (x, y) => x.Id == y.Id.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.Insert(`0)">
            <summary>
            Inserts an item.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.Select">
            <summary>
            Selects all items.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.Update(`0)">
            <summary>
            Updates an item.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.Delete(`0)">
            <summary>
            Deletes an item.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.IndexOfEntity(`0)">
            <summary>
            Gets the index of an item.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.IViewObject">
            <summary>
            View object with intelligent property, data and event caching.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.IViewObject.Parent">
            <summary>
            Gets or sets the parent object.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.IViewObject.Children">
            <summary>
            Gets a collection of child objects.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IViewObject.InvalidateView(System.Boolean)">
            <summary>
            Invalidates the view, causing it to be re-rendered.
            </summary>
            <remarks>
            If events are suspended the request is cached, then rendering will be delayed until events are resumed.
            </remarks>
            <returns>
            True if the operation was executed immediately, or false when cached.
            </returns>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IViewObject.InvalidateLayout(System.Boolean)">
            <summary>
            Invalidates the layout of this object, optionally cascading to child objects.
            </summary>
            <remarks>
            Property cache is invalidated immediately, including children when specifeid, also when events are suspended.
            </remarks>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.IViewObject.ParentChanged">
            <summary>
            Fired when the <see cref="P:CodeForDotNet.ComponentModel.IViewObject.Parent"/> is changed.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.ViewObject">
            <summary>
            View object with intelligent property, data and event caching.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.#ctor">
            <summary>
            Creates an instance with no <see cref="P:CodeForDotNet.ComponentModel.ViewObject.Parent"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.#ctor(CodeForDotNet.ComponentModel.IViewObject)">
            <summary>
            Creates and instance with the specified <see cref="P:CodeForDotNet.ComponentModel.ViewObject.Parent"/>.
            </summary>
            <param name="parent">Parent.</param>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.ViewObject.Parent">
            <summary>
            Gets or sets the parent object.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.ViewObject.Children">
            <summary>
            Gets a collection of child objects.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.InvalidateView(System.Boolean)">
            <summary>
            Invalidates the view, causing it to be re-rendered.
            </summary>
            <param name="includeChildren">True to call <see cref="M:CodeForDotNet.ComponentModel.ViewObject.InvalidateView(System.Boolean)"/> on all children, recursively.</param>
            <remarks>
            If events are suspended the request is cached, then rendering will be delayed until events are resumed.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.InvalidateLayout(System.Boolean)">
            <summary>
            Invalidates the layout of this object, optionally cascading to child objects.
            </summary>
            <param name="includeChildren">True to call <see cref="M:CodeForDotNet.ComponentModel.ViewObject.InvalidateLayout(System.Boolean)"/> on all children, recursively.</param>
            <remarks>
            Property cache is invalidated immediately, including children when specifeid, also when events are suspended.
            </remarks>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.ViewObject.ParentChanged">
            <summary>
            Fired when the <see cref="P:CodeForDotNet.ComponentModel.ViewObject.Parent"/> is changed.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.OnChildrenChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Hooks events and performs initialization when <see cref="P:CodeForDotNet.ComponentModel.ViewObject.Children"/> are added or removed.
            </summary>
            <param name="sender">Event initiator.</param>
            <param name="args">Event arguments.</param>
            <remarks>
            Inheritors must call this base class method first.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.OnChildDisposed(System.Object,System.EventArgs)">
            <summary>
            Removes children when they are disposed.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.OnChildPropertyChanged(System.Object,CodeForDotNet.ComponentModel.PropertyObjectChangeEventArgs)">
            <summary>
            Called when the <see cref="E:CodeForDotNet.ComponentModel.IPropertyObject.PropertyObjectChanged"/> event is fired
            on any of the <see cref="P:CodeForDotNet.ComponentModel.ViewObject.Children"/>.
            </summary>
            <param name="sender">Event initiator.</param>
            <param name="arguments">Event arguments.</param>
            <remarks>
            Inheritors must call this base class method first.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.OnEventsResumed">
            <summary>
            Fires any cached events when events are resumed.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.ViewObjectParentChangedEventArgs">
            <summary>
            Carries arguments for the <see cref="E:CodeForDotNet.ComponentModel.ViewObject.ParentChanged"/> event.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObjectParentChangedEventArgs.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObjectParentChangedEventArgs.#ctor(CodeForDotNet.ComponentModel.IViewObject,CodeForDotNet.ComponentModel.IViewObject)">
            <summary>
            Creates an instance with the specified values.
            </summary>
            <param name="oldParent">Old parent.</param>
            <param name="newParent">New parent.</param>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.ViewObjectParentChangedEventArgs.OldParent">
            <summary>
            Old parent.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.ViewObjectParentChangedEventArgs.NewParent">
            <summary>
            New parent.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Configuration.IApplicationSettingsBase">
            <summary>
            Interface representation of the system <see cref="T:System.Configuration.ApplicationSettingsBase"/>.
            </summary>
            <remarks>
            Acts as a base class for deriving concrete wrapper classes to implement the
            application settings feature in Window Forms applications.
            </remarks>
        </member>
        <member name="P:CodeForDotNet.Configuration.IApplicationSettingsBase.Context">
            <summary>
            Gets the application settings context associated with the settings group.
            </summary>
            <returns>
            A System.Configuration.SettingsContext associated with the settings group.
            </returns>
        </member>
        <member name="P:CodeForDotNet.Configuration.IApplicationSettingsBase.Properties">
            <summary>
            Gets the collection of settings properties in the wrapper.
            </summary>
            <returns>
            A System.Configuration.SettingsPropertyCollection containing all the System.Configuration.SettingsProperty
            objects used in the current wrapper.
            </returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            The associated settings provider could not be found or its instantiation failed.
            </exception>
        </member>
        <member name="P:CodeForDotNet.Configuration.IApplicationSettingsBase.PropertyValues">
            <summary>
            Gets a collection of property values.
            </summary>
            <returns>
            A System.Configuration.SettingsPropertyValueCollection of property values.
            </returns>
        </member>
        <member name="P:CodeForDotNet.Configuration.IApplicationSettingsBase.Providers">
            <summary>
            Gets the collection of application settings providers used by the wrapper.
            </summary>
            <returns>
            A System.Configuration.SettingsProviderCollection containing all the System.Configuration.SettingsProvider
            objects used by the settings properties of the current settings wrapper.
            </returns>
        </member>
        <member name="P:CodeForDotNet.Configuration.IApplicationSettingsBase.SettingsKey">
            <summary>
            Gets or sets the settings key for the application settings group.
            </summary>
            <returns>
            A System.String containing the settings key for the current settings group.
            </returns>
        </member>
        <member name="P:CodeForDotNet.Configuration.IApplicationSettingsBase.Item(System.String)">
            <summary>
            Gets or sets the value of the specified application settings property.
            </summary>
            <param name="propertyName">A System.String containing the name of the property to access.</param>
            <returns>If found, the value of the named settings property; otherwise, null.</returns>
            <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">
            There are no properties associated with the current wrapper or the specified
            property could not be found.
            </exception>
            <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException">
            An attempt was made to set a read-only property.
            </exception>
            <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException">
            The value supplied is of a type incompatible with the settings property,
            during a set operation.
            </exception>
        </member>
        <member name="E:CodeForDotNet.Configuration.IApplicationSettingsBase.SettingChanging">
            <summary>
            Occurs before the value of an application settings property is changed.
            </summary>
        </member>
        <member name="E:CodeForDotNet.Configuration.IApplicationSettingsBase.SettingsLoaded">
            <summary>
            Occurs after the application settings are retrieved from storage.
            </summary>
        </member>
        <member name="E:CodeForDotNet.Configuration.IApplicationSettingsBase.SettingsSaving">
            <summary>
            Occurs before values are saved to the data store.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Configuration.IApplicationSettingsBase.GetPreviousVersion(System.String)">
            <summary>
            Returns the value of the named settings property for the previous version
            of the same application.
            </summary>
            <param name="propertyName">
            A System.String containing the name of the settings property whose value
            is to be returned.
            </param>
            <returns>
            An System.Object containing the value of the specified System.Configuration.SettingsProperty
            if found; otherwise, null.
            </returns>
            <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">
            The property does not exist. The property count is zero or the property cannot
            be found in the data store.
            </exception>
        </member>
        <member name="M:CodeForDotNet.Configuration.IApplicationSettingsBase.Reload">
            <summary>
            Refreshes the application settings property values from persistent storage.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Configuration.IApplicationSettingsBase.Reset">
            <summary>
            Restores the persisted application settings values to their corresponding
            default properties.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Configuration.IApplicationSettingsBase.Save">
            <summary>
            Stores the current values of the application settings properties.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Configuration.IApplicationSettingsBase.Upgrade">
            <summary>
            Updates application settings to reflect a more recent installation of the application.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Configuration.RegistrySettingsProvider">
            <summary>
            Settings provider which stores settings in the HKLM or HKCU registry.
            Builds the registry path based on the SOFTWARE base key then subkeys of AssemblyCompany, AssemblyProduct
            and optional RegistrySettingsProviderSubkeyAttribute.
            e.g. HKLM/HKCU then SOFTWARE\Company\Product\[Subkey\]Setting = Value.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Configuration.RegistrySettingsProvider.ApplicationName">
            <summary>
            Name of the application. Returns the AssemblyProduct name.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Configuration.RegistrySettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider with our application name.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Configuration.RegistrySettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
            <summary>
            SetPropertyValue is invoked when ApplicationSettingsBase.Save is called
            for only the values marked with this provider attribute.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Configuration.RegistrySettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Returns the collection of settings property values for the specified application
            instance and settings property group.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Configuration.RegistrySettingsProvider.GetRegKey(System.Configuration.SettingsProperty)">
            <summary>
            Helper method: fetches correct registry subkey.
            HKLM is used for settings marked as application-scoped.
            HKLU is used for settings marked as user-scoped. 
            </summary>
        </member>
        <member name="M:CodeForDotNet.Configuration.RegistrySettingsProvider.IsUserScoped(System.Configuration.SettingsProperty)">
            <summary>
            Helper method: walks the "attribute bag" for a given property
            to determine if it is user-scoped or not.
            Note that this provider does not enforce other rules, such as 
               - unknown attributes
               - improper attribute combinations (e.g. both user and app - this implementation
                 would say true for user-scoped regardless of existence of app-scoped)
            </summary>
        </member>
        <member name="M:CodeForDotNet.Configuration.RegistrySettingsProvider.GetSubKeyPath(System.Configuration.SettingsProperty)">
            <summary>
            Builds the registry path based on the SOFTWARE base key then subkeys of AssemblyCompany, AssemblyProduct
            and optional RegistrySettingsProviderSubkeyAttribute. Does not include the HKLM or HKCU hive.
            e.g. SOFTWARE\Company\Product\[Subkey\]Setting = Value.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Configuration.RegistrySettingsProviderSubkeyAttribute">
            <summary>
            Attribute which is applied to settings properties in the settings designer class
            to allow the sub-key(s) to be specified when using the RegistrySettingsProvider.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Configuration.RegistrySettingsProviderSubkeyAttribute.#ctor(System.String)">
            <summary>
            Specified the sub-key(s) in which to store this setting.
            </summary>
            <param name="subkey"></param>
        </member>
        <member name="P:CodeForDotNet.Configuration.RegistrySettingsProviderSubkeyAttribute.Subkey">
            <summary>
            Sub-Key path in which to store the setting. e.g. "Preferences\Display".
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.Adapters.ErrorReportDataAdapter">
            <summary>
            Data adapter for the <see cref="T:CodeForDotNet.Data.ErrorReportData"/> entity.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Adapters.ErrorReportDataAdapter.Read(CodeForDotNet.Data.ErrorReportData,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Reads properties of a <see cref="T:CodeForDotNet.Data.ErrorReportData"/> from a data reader.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Adapters.ErrorReportDataAdapter.Read(CodeForDotNet.Data.ErrorReportData,System.Data.SqlClient.SqlDataReader,System.Boolean)">
            <summary>
            Reads properties of a <see cref="T:CodeForDotNet.Data.ErrorReportData"/> from a data reader.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Adapters.ErrorReportDataAdapter.Set(CodeForDotNet.Data.ErrorReportData,System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            Sets data command parameter values for a <see cref="T:CodeForDotNet.Data.ErrorReportData"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Adapters.ErrorReportDataAdapter.Set(CodeForDotNet.Data.ErrorReportData,System.Data.SqlClient.SqlParameterCollection,System.Boolean)">
            <summary>
            Sets data command parameter values for a <see cref="T:CodeForDotNet.Data.ErrorReportData"/>.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.Adapters.GuidDataKeyAdapter">
            <summary>
            Data adapter for the <see cref="T:CodeForDotNet.Data.GuidDataKey"/> entity.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Adapters.GuidDataKeyAdapter.Read(CodeForDotNet.Data.GuidDataKey,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Reads properties of a <see cref="T:CodeForDotNet.Data.GuidDataKey"/> from a data reader.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Adapters.GuidDataKeyAdapter.Set(CodeForDotNet.Data.GuidDataKey,System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            Sets data command parameter values for a <see cref="T:CodeForDotNet.Data.GuidDataKey"/>.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.DataReaderExtensions">
            <summary>
            Extensions for <see cref="T:System.Data.IDataReader"/> based data readers,
            including the associated <see cref="T:System.Data.IDataRecord"/> interface.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullable``1(System.Data.IDataRecord,System.String,``0)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <param name="defaultValue">
            Value to return when the column is <see cref="T:System.DBNull"/>.
            When not specified returns the default type value,
            e.g. empty value such as zero for int types, or null for reference types.
            </param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
            <remarks>
            The type must match or have a cast operator, because no explicit conversion is performed.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullable``1(System.Data.IDataRecord,System.Int32,``0)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <param name="defaultValue">
            Value to return when the column is <see cref="T:System.DBNull"/>.
            When not specified returns the default type value,
            e.g. empty value such as zero for int types, or null for reference types.
            </param>
            <returns>Value of the correct type or default when <see cref="T:System.DBNull"/>.</returns>
            <remarks>
            The type must match or have a cast operator, because no explicit conversion is performed.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.Get``1(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see parmref="T"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
            <remarks>
            The type must match or have a cast operator, because no explicit conversion is performed.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.Get``1(System.Data.IDataRecord,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Reads a <see parmref="T"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <param name="conversionLocale">
            Optional <see cref="T:System.Globalization.CultureInfo"/> locale override to use when type conversion is necessary.
            Only relevant when the types don't match and a specific locale is required.
            Leave null or unspecified to use the default thread locale.
            </param>
            <returns>Value of the correct type.</returns>
            <remarks>
            The type must match or have a cast operator, because no explicit conversion is performed.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableString(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableString(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetString(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.String"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableInt16(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Reads an <see cref="T:System.Int16"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableInt32(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Reads an <see cref="T:System.Int32"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableInt64(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableInt64(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetInt64(System.Data.IDataRecord,System.String)">
            <summary>
            Reads an <see cref="T:System.Int64"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableBoolean(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDateTime(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            Read a DateTime from a reader.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDateTimeOffset(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDateTimeOffset(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetDateTimeOffset(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.DateTimeOffset"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDateTimeAsOffset(System.Data.IDataRecord,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name,
            with conversion to a <see cref="T:System.Nullable`1"/>,
            using either a specific or system time zone.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <param name="offset">
            Optional UTC offset to use during conversion.
            The system time zone is used when not specified, i.e. to covert from a source time which is local, do not specify an offset.
            To convert from a source time which is UTC, an offset of <see cref="F:System.TimeSpan.Zero"/> must be used.
            </param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
            <remarks>
            <para>
            This function facilitates standardization of dates with offset, when reading
            databases which do not take time zones into account.
            </para>
            <para>
            When the local system time zone is used it will only work reliably when running on
            systems in the same time zone as the original database system. Hence it should only
            be used during migration or when the geographical location is fixed.
            </para>
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDateTimeAsOffset(System.Data.IDataRecord,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> with conversion to a <see cref="T:System.Nullable`1"/>,
            using either a specific or system time zone.        
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <param name="offset">
            Optional UTC offset to use during conversion.
            The system time zone is used when not specified, i.e. to covert from a source time which is local, do not specify an offset.
            To convert from a source time which is UTC, an offset of <see cref="F:System.TimeSpan.Zero"/> must be used.
            </param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
            <remarks>
            <para>
            This function facilitates standardization of dates with offset, when reading
            databases which do not take time zones into account.
            </para>
            <para>
            When the local system time zone is used it will only work reliably when running on
            systems in the same time zone as the original database system. Hence it should only
            be used during migration or when the geographical location is fixed.
            </para>
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetDateTimeAsOffset(System.Data.IDataRecord,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Reads a nullable <see cref="T:System.DateTimeOffset"/> by column name with conversion to a <see cref="T:System.DateTimeOffset"/>,
            using either a specific or system time zone.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <param name="offset">
            Optional UTC offset to use during conversion.
            The system time zone is used when not specified, i.e. to covert from a source time which is local, do not specify an offset.
            To convert from a source time which is UTC, an offset of <see cref="F:System.TimeSpan.Zero"/> must be used.
            </param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
            <remarks>
            <para>
            This function facilitates standardization of dates with offset, when reading
            databases which do not take time zones into account.
            </para>
            <para>
            When the local system time zone is used it will only work reliably when running on
            systems in the same time zone as the original database system. Hence it should only
            be used during migration or when the geographical location is fixed.
            </para>
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetDateTimeAsOffset(System.Data.IDataRecord,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Reads a <see cref="T:System.DateTime"/> with conversion to a <see cref="T:System.DateTimeOffset"/>,
            using either a specific or system time zone.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Index of the column to read.</param>
            <param name="offset">
            Optional UTC offset to use during conversion.
            The system time zone is used when not specified, i.e. to covert from a source time which is local, do not specify an offset.
            To convert from a source time which is UTC, an offset of <see cref="F:System.TimeSpan.Zero"/> must be used.
            </param>
            <remarks>
            <para>
            This function facilitates standardization of dates with offset, when reading
            databases which do not take time zones into account.
            </para>
            <para>
            When the local system time zone is used it will only work reliably when running on
            systems in the same time zone as the original database system. Hence it should only
            be used during migration or when the geographical location is fixed.
            </para>
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableSingle(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableSingle(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetSingle(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Single"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDouble(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Double"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="T:CodeForDotNet.Data.DataSetChangeLog">
            <summary>
            DataSet change log - monitors DataSet changes to facilitate,
            roll-back and roll-forward functionality plus a descriptive
            change list, e.g. to support Undo/Redo capability.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.DataSetChangeLog._changeLog">
            <summary>
            The change log. Contains the details of all previous actions, available for Rollback, and any future action, available for Rollforward.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.#ctor(System.Data.DataSet)">
            <summary>
            Creates an instance to monitor the specified DataSet.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.Dispose(System.Boolean)">
            <summary>
            Frees resources used by this object.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.DataSetChangeLog.SyncRoot">
            <summary>
            Thread synchronization object.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.DataSetChangeLog.Data">
            <summary>
            DataSet which this change log belongs to.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.DataSetChangeLog._logIndex">
            <summary>
            Current entry in the change log. Unless there are any redo actions available, this will always be the last entry in the array.
            When the change log is empty, the index is -1.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.GetUndoList">
            <summary>
            Gets a list of names for the changes available to roll-back.
            The list is in chronological order, with the oldest change at the beginning and last change at the end.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.GetRedoList">
            <summary>
            Gets a list of names for the changes available to roll-forwards.
            The list is in chronological order, with the next change at the beginning and last change at the end.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.Checkpoint(System.String)">
            <summary>
            Commits the current changes since the last checkpoint to the ChangeLog, making it available for Rollback as a unit.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.Undo">
            <summary>
            Rolls-back the DataSet by 1 step.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.Undo(System.Int32)">
            <summary>
            Rolls-back the DataSet by the specified number of checkpoint "steps".
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.Redo(System.Int32)">
            <summary>
            Rolls the DataSet forwards by the specified number of checkpoint "steps".
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.GetPrimaryKeyFilterExpression(System.Data.DataRow)">
            <summary>
            Builds a DataRow filter expression statement that can be used to Select() the row uniquely within it's DataTable.
            Requires a primary key to be defined in the table schema.
            </summary>
            <param name="row">Row to use as a model for the filter expression. Primary key values will be taken from here.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="T:CodeForDotNet.Data.DataSetChangeLogEntry">
            <summary>
            Contains information about a change in the Change Log.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLogEntry.#ctor(System.DateTime,System.String,System.Data.DataSet)">
            <summary>
            Creates a new instance of this structure containing the specified data.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLogEntry.Dispose(System.Boolean)">
            <summary>
            Frees resources used by this object.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.DataSetChangeLogEntry.Timestamp">
            <summary>
            Timestamp at which the action occured.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.DataSetChangeLogEntry.Name">
            <summary>
            Short name of the action.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.DataSetChangeLogEntry.Changes">
            <summary>
            Snapshot of the changes, including DataRowVersion.Original data needed to Rollback, and DataRowVersion.Current needed to Rollforward.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.DataSetExtensions">
            <summary>
            Extensions to the <see cref="T:System.Data.DataSet"/> class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetExtensions.GetErrors(System.Data.DataSet)">
            <summary>
            Gets all errors recorded within a DataSet.
            </summary>
            <remarks>
            Useful because the default behaviour of operations such as DataAdapter failed updates is
            to return a generic error and not the specifics. This method can be used to provide full
            error detail in logs or messages, or as a static call during debugging when no error
            handling exists.
            </remarks>
            <returns>Collection of error mesages from all tables and rows in the DataSet.</returns>
        </member>
        <member name="T:CodeForDotNet.Data.SqlDataAccessLayer">
            <summary>
            Disposable base class for a SQL Data Access Layer which holds connection
            information and helper methods.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.SqlDataAccessLayer.#ctor(System.String)">
            <summary>
            Initializes the database connection (but does not open it).
            Ensure this object is disposed to close the connection if it was opened.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.SqlDataAccessLayer.Dispose(System.Boolean)">
            <summary>
            Diposes resources either proactively via Dipose() or during finalization.
            </summary>
            <param name="disposing">True when disposing, false when finalizing.</param>
        </member>
        <member name="P:CodeForDotNet.Data.SqlDataAccessLayer.ConnectionString">
            <summary>
            Connection string for this instance.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.SqlDataAccessLayer.Connection">
            <summary>
            Current connection, for the lifetime of this object.
            Opened on the first call to OpenConnection(), closed during Dispose.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.SqlDataAccessLayer.OpenConnection">
            <summary>
            Opens or re-opens the connection if closed or broken.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.SqlExtensions">
            <summary>
            Extensions and helper methods for working with SQL.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.SqlExtensions.ParameterCache">
            <summary>
            Cache of <see cref="T:System.Data.SqlClient.SqlParameter"/> items for a given command hash-code.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.SqlExtensions.BuildConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an SQL Server connection string from common pieces,
            e.g. server name, database, user &amp; password (if not integrated security).
            </summary>
            <param name="serverName">Database server name or (local) for shared memory local access.</param>
            <param name="databaseName">Default database name.</param>
            <param name="userName">User name or null/empty for Windows integrated security.</param>
            <param name="password">Password or null/empty for Windows integrated security.</param>
            <returns>SQL connection string.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.SqlExtensions.CreateCommandWithParameters(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Creates a command object for the specified stored procedure, automatically
            populating the parameters. Parameter sets are cached for performance.
            </summary>
            <param name="connection">Connection used to derive parameters (first time only) or create the command.</param>
            <param name="procedureName">Name of the stored procedure for which to create the command and parameters.</param>
        </member>
        <member name="T:CodeForDotNet.Diagnostics.ActivityIdTraceFilter">
            <summary>
            Filters trace events for a specific activity ID.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.ActivityIdTraceFilter.#ctor(System.Guid)">
            <summary>
            Creates an instance to filter all events except the specified activity ID.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Diagnostics.ActivityIdTraceFilter.ActivityId">
            <summary>
            Activity ID to capture (all others are filtered).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.ActivityIdTraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
            <summary>
            Filters events.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Diagnostics.FileWriterTraceListener">
            <summary>
            Writes trace output to a file, supporting environment variables in the filename and lazy open of the file.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Diagnostics.FileWriterTraceListener._fileName">
            <summary>
            Filename to write to.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Diagnostics.FileWriterTraceListener._stream">
            <summary>
            Output file stream.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.#ctor(System.String)">
            <summary>
            Creates the object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.Close">
            <summary>
            Closes the output stream (if open).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.Flush">
            <summary>
            Flushes any buffered data to the file (if open).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.Dispose(System.Boolean)">
            <summary>
            Cleans-up resources.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.Write(System.String)">
            <summary>
            Writes to the output stream.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.WriteLine(System.String)">
            <summary>
            Writes to the output stream followed by a new line.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.OpenFile">
            <summary>
            Opens the stream when it is needed (lazy open).
            </summary>
        </member>
        <member name="T:CodeForDotNet.Diagnostics.ProcessExtensions">
            <summary>
            Extends the <see cref="T:System.Diagnostics.Process"/> class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.ProcessExtensions.Run(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates and executes a process with timeout, capturing the results.
            </summary>
            <param name="program">Program to execute. Must not be null</param>
            <param name="parameters">Parameters to pass. Can be null. Can contain environment variables</param>
            <param name="workingDirectory">Working directory to use. Can be relative. Null or empty means current directory.</param>
            <param name="timeout">Optional timeout in seconds.</param>
            <returns><see cref="T:CodeForDotNet.Diagnostics.ProcessResult"/> with set ReturnCode, Output, Errors, TimedOut</returns>
        </member>
        <member name="T:CodeForDotNet.Diagnostics.ProcessResult">
            <summary>
            Holds information generated by running a <see cref="T:System.Diagnostics.Process"/>.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Diagnostics.ProcessResult.ReturnCode">
            <summary>
            Return code, when the process exited normally.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Diagnostics.ProcessResult.Output">
            <summary>
            Console standard output (if any).
            </summary>
            <remarks>
            Windowed applications will normally have no console output.
            </remarks>
        </member>
        <member name="P:CodeForDotNet.Diagnostics.ProcessResult.Errors">
            <summary>
            Console error output (if any).
            </summary>
            <remarks>
            Windowed applications will normally have no console output.
            </remarks>
        </member>
        <member name="P:CodeForDotNet.Diagnostics.ProcessResult.TimedOut">
            <summary>
            Indicates the process timed-out,
            in which case the <see cref="P:CodeForDotNet.Diagnostics.ProcessResult.ReturnCode"/> is null.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.ColorCollection">
            <summary>
            Collection of <see cref="T:System.Drawing.Color"/> entries
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.ColorCollection.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.ColorCollection.#ctor(System.Collections.Generic.IList{System.Drawing.Color})">
            <summary>
            Creates an instance based on an existing list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:CodeForDotNet.Drawing.ColorExtensions">
            <summary>
            Extensions for working with the <see cref="T:System.Drawing.Color"/> class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.ColorExtensions.ToRgbString(System.Drawing.Color)">
            <summary>
            Converts the color to a hexadecimal RGB string, e.g. #RRGGBB.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.ColorExtensions.ToArgbString(System.Drawing.Color)">
            <summary>
            Converts the color to a hexadecimal ARGB string, e.g. #AARRGGBB.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.ImageExtensions">
            <summary>
            Extensions for working with image classes.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.BmpContentType">
            <summary>
            BMP file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.EmfContentType">
            <summary>
            EMF file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.WmfContentType">
            <summary>
            WMF file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.GifContentType">
            <summary>
            GIF file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.TifContentType">
            <summary>
            TIF file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.IcoContentType">
            <summary>
            ICO file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.PngContentType">
            <summary>
            PNG file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.JpgContentType">
            <summary>
            JPG file content type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.ImageExtensions.GetContentType(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets the MIME content type of an <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
            </summary>
            <param name="format">Image format.</param>
            <returns>Content type or null when not supported.</returns>
        </member>
        <member name="M:CodeForDotNet.Drawing.ImageExtensions.GetContentType(System.Guid)">
            <summary>
            Gets the MIME content type of an <see cref="P:System.Drawing.Imaging.ImageFormat.Guid"/>.
            </summary>
            <param name="formatId">Image format Id.</param>
            <returns>Content type or null when not supported.</returns>
        </member>
        <member name="M:CodeForDotNet.Drawing.ImageExtensions.GetFormat(System.String)">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ImageFormat"/> for a MIME content type.
            </summary>
            <param name="contentType">MIME content type.</param>
            <returns>Image format or null when unsupported.</returns>
        </member>
        <member name="T:CodeForDotNet.Drawing.LogicalBrush">
            <summary>
            Brush data.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.#ctor">
            <summary>
            Creates the brush.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.#ctor(System.Drawing.Color)">
            <summary>
            Creates a brush with a single color.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.#ctor(System.Drawing.Color,System.Drawing.Color,System.Decimal)">
            <summary>
            Creates a brush with a two colour gradient.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.#ctor(System.Byte[],System.Decimal,System.Drawing.Drawing2D.WrapMode,System.Single)">
            <summary>
            Creates a brush with a texture.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.BrushType">
            <summary>
            TypeId of brush.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.StartColor">
            <summary>
            Start colour, when relevant for the type.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.StartColorSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Drawing.LogicalBrush.StartColor"/> property from XML serialization when empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.EndColor">
            <summary>
            End colour, when relevant for the type.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.EndColorSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Drawing.LogicalBrush.EndColor"/> property from XML serialization when empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.Angle">
            <summary>
            Angle, when relevant for the type.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.AngleSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Drawing.LogicalBrush.Angle"/> property from XML serialization when empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.TextureId">
            <summary>
            Texture ID, used to correlate with media libraries,
            enabling re-use of images for performance and to reduce
            disk space when saved.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.Texture">
            <summary>
            Texture, when relevant for the type.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.TextureSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Drawing.LogicalBrush.Texture"/> property from XML serialization when empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.WrapMode">
            <summary>
            Wrap mode, when relevant for the type, i.e. texture.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.WrapModeSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Drawing.LogicalBrush.WrapMode"/> property from XML serialization when empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.Scale">
            <summary>
            Scaling factor, when relevant for the type.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalBrush.ScaleSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Drawing.LogicalBrush.Scale"/> property from XML serialization when empty.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.ToString">
            <summary>
            Converts the brush to an XML string.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.Parse(System.String)">
            <summary>
            Creates an instance from a string.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.MakeBrush(System.Drawing.Rectangle)">
            <summary>
            Creates a .NET brush based on the current brush specification.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.MakeBrush(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Creates a .NET brush based on the current brush specification,
            optionally flipping the start and end colours.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.op_Equality(CodeForDotNet.Drawing.LogicalBrush,CodeForDotNet.Drawing.LogicalBrush)">
            <summary>
            Overrides the equality operator to compare by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.op_Inequality(CodeForDotNet.Drawing.LogicalBrush,CodeForDotNet.Drawing.LogicalBrush)">
            <summary>
            Overrides the inequality operator to compare by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.Equals(System.Object)">
            <summary>
            Overrides the Equals method to compare by value,
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.GetHashCode">
            <summary>
            Gets a hash-code for this object based on current values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.Copy">
            <summary>
            Copies this brush.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalBrush.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.LogicalBrushType">
            <summary>
            Brush type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.LogicalBrushType.SingleColor">
            <summary>
            A simple, single colour brush.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.LogicalBrushType.TwoColorGradient">
            <summary>
            A two colour brush with a gradient between the start and end color.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.LogicalBrushType.Texture">
            <summary>
            A texture brush.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.LogicalFont">
            <summary>
            Logical <see cref="T:System.Drawing.Font"/>. Facilitates storage of font values without creating and managing resources.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.#ctor(System.String,System.Single,System.Drawing.FontStyle)">
            <summary>
            Creates an instance with the specified properties.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.#ctor(System.Drawing.Font)">
            <summary>
            Creates an instance based on the parameters of an existing font.
            </summary>
            <remarks>
            The font is not touched by this instance other than to read it's properties
            and must be disposed as usual by the caller or other owner.
            </remarks>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalFont.Family">
            <summary>
            Font family.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalFont.Size">
            <summary>
            Font size in "em" points.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.LogicalFont.Style">
            <summary>
            Font style.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.ToFont">
            <summary>
            Creates a <see cref="T:System.Drawing.Font"/> with the current properties.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.FromFont(System.Drawing.Font)">
            <summary>
            Creates an instance from a <see cref="T:System.Drawing.Font"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.Parse(System.String)">
            <summary>
            Creates an instance from a string.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.ToString">
            <summary>
            Displays a string representation of the font.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.op_Equality(CodeForDotNet.Drawing.LogicalFont,CodeForDotNet.Drawing.LogicalFont)">
            <summary>
            Overrides the equality operator to compare by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.op_Inequality(CodeForDotNet.Drawing.LogicalFont,CodeForDotNet.Drawing.LogicalFont)">
            <summary>
            Overrides the inequality operator to compare by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.Equals(System.Object)">
            <summary>
            Overrides the Equals method to compare by value,
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.GetHashCode">
            <summary>
            Gets a hash-code for this object based on current values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.Copy">
            <summary>
            Creates a copy of this object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.LogicalFont.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.PointExtensions">
            <summary>
            Provides useful extension methods to the <see cref="T:System.Drawing.Point"/> class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PointExtensions.Add(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Adds two <see cref="T:System.Drawing.Point"/>s together.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PointExtensions.Subtract(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Subtracts one <see cref="T:System.Drawing.Point"/> from another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PointExtensions.Add(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Adds a <see cref="T:System.Drawing.PointF"/> to a PointF.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PointExtensions.Subtract(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Subtracts a <see cref="T:System.Drawing.PointF"/> from a <see cref="T:System.Drawing.PointF"/>.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.Printing.PageSettingsData">
            <summary>
            Printer page settings.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.Color">
            <summary>
            Page color.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.Landscape">
            <summary>
            Landscape mode, otherwise portrait.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.Margins">
            <summary>
            Margins.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.PaperWidth">
            <summary>
            Paper width.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.PaperHeight">
            <summary>
            Paper height.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.PaperName">
            <summary>
            Paper name.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.PaperSizeKind">
            <summary>
            Paper size name.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.PrinterName">
            <summary>
            Printer name.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.Default">
            <summary>
            Default page settings.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Printing.PageSettingsData.ToPageSettings(CodeForDotNet.Drawing.Printing.PageSettingsData)">
            <summary>
            Converts this data to a .NET PageSettings class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Printing.PageSettingsData.FromPageSettings(System.Drawing.Printing.PageSettings)">
            <summary>
            Creates a data structure of this type from .NET PageSettings.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.Printing.PrinterSettingsData">
            <summary>
            Printer settings data.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PrinterSettingsData.Collate">
            <summary>
            Collate option.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PrinterSettingsData.Copies">
            <summary>
            Number of copies.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PrinterSettingsData.DuplexOutput">
            <summary>
            Duplex option.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PrinterSettingsData.PrinterName">
            <summary>
            Printer name.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Printing.PrinterSettingsData.ToPrinterSettings(CodeForDotNet.Drawing.Printing.PrinterSettingsData)">
            <summary>
            Converts this data to a .NET PrinterSettings class.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PrinterSettingsData.Default">
            <summary>
            Default printer settings.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Printing.PrinterSettingsData.FromPrinterSettings(System.Drawing.Printing.PrinterSettings)">
            <summary>
            Converts a .NET PrinterSettings class to a data structure of this type.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.Quadrant">
            <summary>
            View quadrant, used for layout. Quadrants go clockwise from 12 o'clock so they can be
            mapped to 90 degree portions of 360 degrees. i.e. can be used to translate an angle into
            a quadrant.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.Quadrant.TopRight">
            <summary>
            0 to 89 degrees
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.Quadrant.BottomRight">
            <summary>
            90 to 179 degrees
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.Quadrant.BottomLeft">
            <summary>
            180 to 269 degrees
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.Quadrant.TopLeft">
            <summary>
            270 to 359 degrees
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.Vector2">
            <summary>
            A 2D vector represented by angle and distance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Creates structure of this type containing the specified values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Vector2.Equals(System.Object)">
            <summary>
            Compares two this object against the other by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Vector2.GetHashCode">
            <summary>
            Gets a hash-code based on the current values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Vector2.op_Equality(CodeForDotNet.Drawing.Vector2,CodeForDotNet.Drawing.Vector2)">
            <summary>
            Compares two objects of this type for equality.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Vector2.op_Inequality(CodeForDotNet.Drawing.Vector2,CodeForDotNet.Drawing.Vector2)">
            <summary>
            Compares two objects of this type for inequality.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Vector2.op_Addition(CodeForDotNet.Drawing.Vector2,CodeForDotNet.Drawing.Vector2)">
            <summary>
            Overrides the addition operator, adding both angle and distance values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Vector2.op_Subtraction(CodeForDotNet.Drawing.Vector2,CodeForDotNet.Drawing.Vector2)">
            <summary>
            Overrides the subtraction operator, subtracting both angle and distance values.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Vector2.Angle">
            <summary>
            The angle of this vector.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Vector2.Distance">
            <summary>
            The distance of this vector.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Vector2.FromPointF(System.Drawing.PointF)">
            <summary>
            Converts the DxDy vector to an AngleDistance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Vector2.ToPointF">
            <summary>
            Converts an AngleDistance vector this type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Vector2.Add(CodeForDotNet.Drawing.Vector2)">
            <summary>
            Adds the value to this instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Vector2.Subtract(CodeForDotNet.Drawing.Vector2)">
            <summary>
            Subtracts the value from this instance.
            </summary>
        </member>
        <member name="T:CodeForDotNet.IO.FileExtensions">
            <summary>
            Provides helper functions for working with files and directories.
            </summary>
        </member>
        <member name="F:CodeForDotNet.IO.FileExtensions.FileTimeMinValue">
            <summary>
            Minimum <see cref="T:System.DateTime"/> reported by the file system.
            </summary>
        </member>
        <member name="M:CodeForDotNet.IO.FileExtensions.GetDirectorySize(System.String,System.String[])">
            <summary>
            Counts the size of all files in all subdirectories of the specified path.
            </summary>
            <param name="sourcePath">Directory to scan.</param>
            <param name="excludeFiles">List of filenames to exclude.</param>
            <returns>Total size in bytes.</returns>
        </member>
        <member name="M:CodeForDotNet.IO.FileExtensions.DeleteFileForce(System.String)">
            <summary>
            Forcibly deletes a file; removing any attributes (i.e. read-only) which may prevent deletion.
            </summary>
        </member>
        <member name="M:CodeForDotNet.IO.FileExtensions.DeleteDirectoryForce(System.String)">
            <summary>
            Forcibly deletes a directory; removing any attributes (i.e. read-only) from files within.
            </summary>
        </member>
        <member name="M:CodeForDotNet.IO.FileExtensions.CountFiles(System.String)">
            <summary>
            Recursively counts files in a directory.
            </summary>
        </member>
        <member name="M:CodeForDotNet.IO.FileExtensions.CopyDirectory(System.String,System.String,System.EventHandler{CodeForDotNet.IO.FileExtensionsProgressEventArgs})">
            <summary>
            Copies all the files and subdirectories from one path to another.
            Creates the target path and overwrites any existing files as necessary.
            Provides progress feedback for each directory copied.
            </summary>
            <param name="sourcePath">Source directory.</param>
            <param name="targetPath">Target directory.</param>
            <param name="progressHandler">Optional progress delegate.</param>
        </member>
        <member name="M:CodeForDotNet.IO.FileExtensions.CopyDirectoryRecurse(System.String,System.String,System.EventHandler{CodeForDotNet.IO.FileExtensionsProgressEventArgs},System.Int32@,System.Int32@)">
            <summary>
            Recursion method for <see cref="M:CodeForDotNet.IO.FileExtensions.CopyDirectory(System.String,System.String,System.EventHandler{CodeForDotNet.IO.FileExtensionsProgressEventArgs})"/>.
            </summary>
            <param name="sourcePath">Source directory.</param>
            <param name="targetPath">Target directory.</param>
            <param name="progressHandler">Optional progress delegate.</param>
            <param name="current">Current file count, used for progress feedback. Set to 0 at start.</param>
            <param name="total">Total file count, used for progress feedback. Set to 1 at start.</param>
        </member>
        <member name="T:CodeForDotNet.IO.FileExtensionsProgressEventArgs">
            <summary>
            Event arguments for a progress update.
            </summary>
        </member>
        <member name="P:CodeForDotNet.IO.FileExtensionsProgressEventArgs.Message">
            <summary>
            Progress message.
            </summary>
        </member>
        <member name="P:CodeForDotNet.IO.FileExtensionsProgressEventArgs.Position">
            <summary>
            Current position.
            </summary>
        </member>
        <member name="P:CodeForDotNet.IO.FileExtensionsProgressEventArgs.Range">
            <summary>
            Range/maximum/end position.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Full.Net.NetworkExtensions">
            <summary>
            Networking extensions.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Full.Net.NetworkExtensions.GetFullHostName">
            <summary>
            Gets the host name and any domain (the FQDN) of the local computer.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Full.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.BrushScaleOnlyForTextures">
            <summary>
              Looks up a localized string similar to Scale is only valid for Texture brush types..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.BrushSingleColorHasNoAngle">
            <summary>
              Looks up a localized string similar to Single color brushes do not have an angle..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.BrushTextureHasNoColor">
            <summary>
              Looks up a localized string similar to Textures do not have a color setting..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.BrushTextureWrapModeOnlyForTextures">
            <summary>
              Looks up a localized string similar to TextureWrapMode property is only valid for Textures!.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.BrushTypeHasNoEndColor">
            <summary>
              Looks up a localized string similar to Current brush type does not have an End color..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.BrushTypeHasNoTexture">
            <summary>
              Looks up a localized string similar to Current brush type does not have a texture..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.CreateOpenRegistryKeyError">
            <summary>
              Looks up a localized string similar to Error creating or opening registry key &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.DxDyStringInvalid">
            <summary>
              Looks up a localized string similar to Cannot parse source string to DxDy! Should be #;# format..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.FileExtensionsCopyDirectoryCreateDirectory">
            <summary>
              Looks up a localized string similar to Copying directory {0}....
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.FileExtensionsCopyDirectoryFile">
            <summary>
              Looks up a localized string similar to Copying file {0}....
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.PropertyRequired">
            <summary>
              Looks up a localized string similar to The property &quot;{0}&quot; is required..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.WorkerGroupAbortedWorker">
            <summary>
              Looks up a localized string similar to Worker {0} in group {1} was aborted..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.WorkerGroupAborting">
            <summary>
              Looks up a localized string similar to Worker group {0} aborted..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.WorkerGroupAbortingWorker">
            <summary>
              Looks up a localized string similar to Aborting worker {0} in group {1}..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.WorkerGroupAlreadyRunning">
            <summary>
              Looks up a localized string similar to Worker group &quot;{0}&quot; is already running..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.WorkerGroupError">
            <summary>
              Looks up a localized string similar to Worker {0} ({1}) had an error: {2}..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.WorkerGroupStarting">
            <summary>
              Looks up a localized string similar to Starting worker group {0}..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.WorkerGroupStartingRunTimer">
            <summary>
              Looks up a localized string similar to Started run timer for worker {0} of group {1} with timeout of {2} seconds..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.WorkerGroupStartingStopTimer">
            <summary>
              Looks up a localized string similar to Started stop timer for worker {0} of group {1} with timeout of {2} seconds..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.WorkerGroupStartingWorker">
            <summary>
              Looks up a localized string similar to Starting worker {0} in group {1}..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.WorkerGroupStopping">
            <summary>
              Looks up a localized string similar to Stopping worker group {0}..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.WorkerGroupStoppingWorker">
            <summary>
              Looks up a localized string similar to Stopping worker {0} in group {1}..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Full.Properties.Resources.XmlValdiationError">
            <summary>
              Looks up a localized string similar to XML validation error at line {0} character {1}. {2}.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Numerics.BigIntegerExtensions">
            <summary>
            <see cref="T:System.Numerics.BigInteger"/> extensions.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Numerics.BigIntegerExtensions.NumberDigits">
            <summary>
            Valid number digits in order of value starting at zero.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.BigIntegerExtensions.ToString(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Converts the number to a string of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.BigIntegerExtensions.ToString(System.Numerics.BigInteger,System.Int32,System.Boolean)">
            <summary>
            Converts the number to a string of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.BigIntegerExtensions.ToString(System.Numerics.BigInteger,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Converts the number to a string of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.BigIntegerExtensions.TryParse(System.String,System.Int32,System.Numerics.BigInteger@)">
            <summary>
            Converts a string to a number of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.BigIntegerExtensions.TryParse(System.String,System.Int32,System.Numerics.BigInteger@,System.Boolean)">
            <summary>
            Converts a string to a number of the specified base.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Reflection.AppDomainExtensions">
            <summary>
            Contains extensions for working with <see cref="T:System.AppDomain"/>s.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Reflection.AppDomainExtensions.Run(System.AppDomain,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Creates an instance then executes a method in a separate application domain,
            using the configuration and working directory of the caller's application domain.
            </summary>
            <remarks>
            Disposes the instance upon completion if it implements <see cref="T:System.IDisposable"/>.
            </remarks>
        </member>
        <member name="T:CodeForDotNet.Xml.PrivateXPathFunctions">
            <summary>
            Provides private (non-standard) XPath functions which are not available in XPath 1.0 or 2.0.
            </summary>
            <remarks>
            Use of private functions should be avoided to ensure all data remains standard and portable.
            Functions must be lowercase (against typical coding standards) to conform to XML naming standards,
            i.e. extension functions are matched using case sensitivity.
            </remarks>
        </member>
        <member name="F:CodeForDotNet.Xml.PrivateXPathFunctions.XmlNamespace">
            <summary>
            XPath function namespace.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.PrivateXPathFunctions.ToLocalTime(System.DateTime)">
            <summary>
            Converts a UTC date and time to local time.
            </summary>
            <param name="value">Date in UTC.</param>
            <returns>Date in local time.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.PrivateXPathFunctions.ToUniversalTime(System.DateTime)">
            <summary>
            Converts a date and time to UTC.
            </summary>
            <param name="value">Date in local time.</param>
            <returns>Date in UTC.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.PrivateXPathFunctions.ToDateTimeShortString(System.DateTime)">
            <summary>
            Converts a date and time to a short format string.
            </summary>
            <param name="value">Date to format.</param>
            <returns>Short format date and time string.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.PrivateXPathFunctions.ToDateTimeLongString(System.DateTime)">
            <summary>
            Converts a date and time to a long format string.
            </summary>
            <param name="value">Date to format.</param>
            <returns>Long format date and time string.</returns>
        </member>
        <member name="T:CodeForDotNet.Xml.W3cXPathFunctions">
            <summary>
            Implements some of the XPath 2.0 functions, which can be added to an <see cref="T:System.Xml.XPath.XPathExpression"/> or <see cref="T:System.Xml.Xsl.XslCompiledTransform"/>
            using the <see cref="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)"/> method and including the
            "http://www.w3.org/2005/xpath-functions" namespace.
            </summary>
            <remarks>
            See http://www.w3.org/TR/xpath-functions for the specification.
            Functions must be lowercase (against typical coding standards) to conform to the XPath 2.0 specification,
            i.e. extension functions are matched using case sensitivity.
            </remarks>
        </member>
        <member name="F:CodeForDotNet.Xml.W3cXPathFunctions.XmlNamespace">
            <summary>
            W3C namespace for XPath 2.0 functions (which we implement here).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.W3cXPathFunctions.matches(System.String,System.String)">
            <summary>
            Returns true if the input string matches the regular expression pattern.
            </summary>
            <param name="input">Input string.</param>
            <param name="pattern">Regular expression pattern to match.</param>
            <returns>True when matched.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.W3cXPathFunctions.matches(System.String,System.String,System.String)">
            <summary>
            Returns true if the input string matches the regular expression pattern.
            </summary>
            <param name="input">Input string.</param>
            <param name="pattern">Regular expression pattern to match.</param>
            <param name="flags">
            Regular expression flag characters, one or more of:
                s - Single-line mode. Corresponds to <see cref="F:System.Text.RegularExpressions.RegexOptions.Singleline"/>.
                m - Multi-line mode. Corresponds to <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline"/>.
                i - Case insensitive match. Corresponds to <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/>.
                x - Ignore whitespace in pattern, e.g. when spaces or new lines are used in long patterns to make it readable.
                    Corresponds to <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace"/>.
            </param>
            <returns>True when matched.</returns>
            <remarks>
            The <paramref name="flags"/> parameter cannot have a default to replace the <see cref="M:CodeForDotNet.Xml.W3cXPathFunctions.matches(System.String,System.String)"/>
            method because the XSLT extensions will not find it (does not support optional parameters).
            </remarks>
        </member>
        <member name="T:CodeForDotNet.Xml.XmlAnyDocument">
            <summary>
            Container for unqualified arbitrary XML data which is serializable
            as child element of a qualified type, i.e. an "xs:any" container.
            </summary>
            <remarks>
            The default root element is "root" when serialized standalone.
            Normally this is a property of another serializable type, in which case the root
            is set by the XML serialization attributes of the parent property or in the
            custom serialization code of the parent class if implemented.
            </remarks>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlAnyDocument.XmlRootName">
            <summary>
            XML root element name.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlAnyDocument.XmlTypeName">
            <summary>
            XML type name.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlAnyDocument.XmlNamespace">
            <summary>
            XML namespace.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by the binary serializer to get object data.
            </summary>
            <remarks>
            We need to control serialization because the <see cref="T:System.Xml.XmlDocumentFragment"/> class is not serializable.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetSchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Gets the schema and XML type of this class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetSchema">
            <summary>
            Returns the XML schema for this type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads properties of this object from XML during de-serialization.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes properties of this object to XML during serialization.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Finalize">
            <summary>
            Calls <see cref="M:CodeForDotNet.Xml.XmlAnyDocument.Dispose(System.Boolean)"/> during finalization to free resources in case it was forgotten.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Dispose">
            <summary>
            Proactively frees resources.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this object.
            </summary>
            <param name="disposing">
            True when called proactively by <see cref="M:CodeForDotNet.Xml.XmlAnyDocument.Dispose"/>.
            False when called during finalization.
            </param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.op_Equality(CodeForDotNet.Xml.XmlAnyDocument,CodeForDotNet.Xml.XmlAnyDocument)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.op_Inequality(CodeForDotNet.Xml.XmlAnyDocument,CodeForDotNet.Xml.XmlAnyDocument)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Xml.XmlAnyDocument.Xml">
            <summary>
            XML data.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Xml.XmlAnyDocument.IsEmpty">
            <summary>
            Indicates whether the XML is currently empty.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Clear">
            <summary>
            Removing all content.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetRoot">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathNavigator"/> positioned at the root of the data.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetPath(System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathNavigator"/> positioned within the data.
            The path is not created.
            </summary>
            <remarks>
            Even if this instance was serialized standalone the default "root" element is not part of the path because it is stripped during de-serialization.
            </remarks>
            <param name="path">Optional XPath expression to select the sub-path. Set null to select the root element.</param>
            <returns><see cref="T:System.Xml.XPath.XPathNavigator"/> positioned at the path or null when not found.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetPath(System.String,System.Boolean)">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathNavigator"/> positioned within the data.
            Parent elements in the path without filters will be created if the <paramref name="create"/> option is set.
            (up to the first filter).
            </summary>
            <remarks>
            Even if this instance was serialized standalone the default "root" element is not part of the path because it is stripped during de-serialization.
            </remarks>
            <param name="path">Optional XPath expression to select the sub-path. Set null to select the root element.</param>
            <param name="create">Create the path if it doesn't exist.</param>
            <returns><see cref="T:System.Xml.XPath.XPathNavigator"/> positioned at the path or null when not found and <paramref name="create"/> was not set true.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Add(System.String,System.String,System.String)">
            <summary>
            Adds XML to the specified data path.
            </summary>
            <param name="sourceXml">XML to add at the path.</param>
            <param name="sourcePath">Source XPath, or null for root.</param>
            <param name="targetPath">Target XPath, or null for root.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Add(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds XML to the specified data path.
            </summary>
            <param name="sourceXml">XML to add at the path.</param>
            <param name="sourcePath">Source XPath, or null for root.</param>
            <param name="targetPath">Target XPath, or null for root.</param>
            <param name="overwrite">Set true to delete data first.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Add(System.Xml.XPath.IXPathNavigable,System.String,System.String)">
            <summary>
            Adds XML to the specified data path.
            </summary>
            <param name="sourceXml">XML to add at the path.</param>
            <param name="sourcePath">Source XPath, or null for root.</param>
            <param name="targetPath">Target XPath, or null for root.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Add(System.Xml.XPath.IXPathNavigable,System.String,System.String,System.Boolean)">
            <summary>
            Adds XML to the specified data path.
            </summary>
            <param name="sourceXml">XML to add at the path.</param>
            <param name="sourcePath">Source XPath, or null for root.</param>
            <param name="targetPath">Target XPath, or null for root.</param>
            <param name="overwrite">Set true to delete data first.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Delete(System.String)">
            <summary>
            Deletes XML from the specified path.
            </summary>
            <param name="path">XPath target path, null for root.</param>
        </member>
        <member name="T:CodeForDotNet.Xml.XmlFormatOptions">
            <summary>
            Formatting options for the <see cref="M:CodeForDotNet.Xml.XmlFullExtensions.FormatXml(System.String,System.Text.Encoding,CodeForDotNet.Xml.XmlFormatOptions)"/> method.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.None">
            <summary>
            No formatting.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.IgnoreErrors">
            <summary>
            Ignore any errors parsing the XML, in which case the unformatted source is returned, i.e. without change.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.OmitXmlDeclaration">
            <summary>
            Exclude the XML declaration processing instruction, i.e. &lt;?xml version="1.0" encoding="..." ?/&gt;
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.Indent">
            <summary>
            When set indent elements according to their tree level and removes extra white space around nodes.
            When not set strips all white space around nodes. Use with the <see cref="F:CodeForDotNet.Xml.XmlFormatOptions.Trim"/> option to also strip white space within nodes.
            Include this option to make the XML easier to read.
            Exclude this option to save space.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.Trim">
            <summary>
            Trims all content, removing white space from all element and attribute text.
            This is independent of the <see cref="F:CodeForDotNet.Xml.XmlFormatOptions.Indent"/> option which controls white space around nodes.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.OmitComments">
            <summary>
            Removes all comments when set.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.OmitNamespaces">
            <summary>
            Removes all namespaces, making them anonymous.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Xml.XmlFullExtensions">
            <summary>
            Creates extensions and helper methods for working with XML.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlAnyXsltFileName">
            <summary>
            Name of the resource containing the <see cref="P:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlAnyTransform"/>.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlCopyXsltFileName">
            <summary>
            Name of the resource containing the <see cref="P:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlCopyTransform"/>.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlTrimXsltFileName">
            <summary>
            Name of the resource containing the <see cref="P:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlTrimTransform"/>.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlAnyTransform">
            <summary>
            XSLT which removes namespaces from the XML, making it anonymous.
            Used by the <see cref="M:CodeForDotNet.Xml.XmlFullExtensions.FormatXml(System.String,System.Text.Encoding,CodeForDotNet.Xml.XmlFormatOptions)"/> methods.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlCopyTransform">
            <summary>
            XSLT which simply copies all XML content.
            Used by the <see cref="M:CodeForDotNet.Xml.XmlFullExtensions.FormatXml(System.String,System.Text.Encoding,CodeForDotNet.Xml.XmlFormatOptions)"/> methods.
            </summary>
            <remarks>
            Normally this transform would not be needed because it does nothing and the <see cref="T:System.Xml.XmlWriter"/>
            can perform indenting directly.
            However for performance and to workaround an issue (wrapping a MemoryStream with a StreamWriter
            then an XmlWriter produces null output) all formatting is passed through the XSL engine which
            supports the switching of encoding at the same time as writing to an <see cref="T:System.Xml.XmlWriter"/>
            with specific settings.
            The <see cref="T:System.Xml.XmlWriter"/> used during the transform controls the indent option.
            </remarks>
        </member>
        <member name="P:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlTrimTransform">
            <summary>
            XSLT which trims XML content fully including attribute values and element content.
            Used by the <see cref="M:CodeForDotNet.Xml.XmlFullExtensions.FormatXml(System.String,System.Text.Encoding,CodeForDotNet.Xml.XmlFormatOptions)"/> methods.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.FormatXml(System.String,System.Text.Encoding,CodeForDotNet.Xml.XmlFormatOptions)">
            <summary>
            Formats an XML string applying specific encoding and formatting options.
            </summary>
            <param name="value">String to which this extension method applies.</param>
            <param name="encoding">
            Encoding use for the transformed output.
            Use the same encoding as the target device to preserve all content,
            e.g. HTTP request encoding or database XML encoding (Unicode for SQL Server).
            </param>
            <param name="options">Formatting options.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.CreateXPathDocument(System.String)">
            <summary>
            Creates an <see cref="T:System.Xml.XPath.XPathDocument"/> from this string assuming it contains well formed XML data.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.DeleteChildren(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNodeType)">
            <summary>
            Deletes all child nodes of the specified type.
            </summary>
            <param name="navigator">Extension instance.</param>
            <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType"/> of children to delete.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.ReadElementDateTime(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlReader.ReadElementContentAsDateTime"/> which behaves similarly to the <see cref="M:System.Xml.XmlReader.ReadElementString"/> method.
            Required because the <see cref="M:System.Xml.XmlReader.ReadElementContentAsDateTime"/> is not robust enough because it does not move to the next element before reading,
            so fails if any other content (whitespace, comments, etc...) appears at the current position, just before the next element to read.
            </summary>
            <param name="reader">Extension target.</param>
            <param name="localName">
            Optional, when both this and the <paramref name="namespace"/> parameter are specified
            the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> method is called before reading the content.
            If only this parameter is specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String)"/> overload is called,
            otherwise the <see cref="M:System.Xml.XmlReader.ReadStartElement"/>.</param>
            <param name="namespace">Optional, when specified causes the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> to be called.</param>
            <return>Value read from the current or specified (name/namespace) element.</return>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.GetReaderValidationSettings(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Gets <see cref="T:System.Xml.XmlReaderSettings"/> configured to validate the specified schemas
            and throw exceptions when warnings occur.
            </summary>
            <param name="schemas">Schemas to validate.</param>
            <returns>Settings to specify in the <see cref="T:System.Xml.XmlReader"/> to cause validation to occur.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.Merge(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Adds the schemas if they are not already present.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.GetNamespaces(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Gets a unique list of all prefixes and their namespaces from a <see cref="T:System.Xml.Schema.XmlSchemaSet"/>
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.LoadXml(System.Xml.Xsl.XslCompiledTransform,System.String)">
            <summary>
            Loads an XSLT transform from an XML string.
            </summary>
            <param name="transform"><see cref="T:System.Xml.Xsl.XslCompiledTransform"/> to which this extension applies.</param>
            <param name="xml">String containing the XML to load.</param>
        </member>
        <member name="T:CodeForDotNet.Xml.XmlSerializerNamespacesExtensions">
            <summary>
            Extensions for working with the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerNamespacesExtensions.Merge(System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Merges namespaces.
            </summary>
        </member>
    </members>
</doc>
